use practice2;

-- Retrieve the names of all products in the "Electronics" category.
SELECT products.product_name
from products
where products.category = 'Electronics';

-- Calculate the total revenue generated by a specific customer with the email address 'sarahdavis@example.com'.
select sum(products.price*order_items.quantity) as total_revenue
from products, order_items
where products.product_id in (select order_items.product_id 
from order_items
where order_items.order_id in (select orders.order_id
from orders
where orders.customer_id = (select customers.customer_id
from customers 
where email = 'sarahdavis@example.com')))
and products.product_id = order_items.product_id;

-- List the top 5 products with the highest average customer ratings, along with their average ratings.
select products.product_name, product_reviews.rating
from products, product_reviews
where products.product_id = product_reviews.product_id
order by product_reviews.rating desc, products.product_name
limit 5;

-- Find the number of products, whose stock quantity is less than or equal to 30.
select count(products.product_name) as total_products_with_less_quantity
from products
where products.stock_quantity <= 30;

-- Retrieve the customer names who have placed more than 2 orders
select customers.first_name, customers.last_name,tot_count as orders_placed
from customers,
(select orders.customer_id as max_user, count(orders.customer_id) as tot_count
from orders
group by orders.customer_id) as subquery
where tot_count > 2 and max_user = customers.customer_id;

-- List all products with their names, categories, and the corresponding customer names who 
-- reviewed them. Include products with no reviews.

select products.product_name, products.category,
customers.first_name, customers.last_name,
product_reviews.review_text
from product_reviews, customers, products
where product_reviews.customer_id = customers.customer_id and 
products.product_id = product_reviews.product_id;

-- Find the total quantity of each product sold in orders placed after '2023-09-02'. 
-- Display the product name and total quantity sold.

select products.product_id, products.product_name,
sum(order_items.quantity) as total_quantity_sold
from order_items, orders, products
where orders.order_date > '2023-09-03'
and orders.order_id = order_items.order_id
and order_items.product_id = products.product_id
group by products.product_id;

-- Retrieve the customers who have never placed an order.
select distinct customers.customer_id, customers.first_name, 
customers.last_name
from customers, orders
where customers.customer_id not in(select orders.customer_id
from orders)
order by customers.customer_id;

-- Calculate the total revenue generated for each category of products. 
-- Display the category name and total revenue, 
-- ordered by revenue in descending order.

select products.category, sum(products.price*order_items.quantity) as revenue
from products, order_items
where products.product_id = order_items.product_id
group by products.category
order by revenue desc;

-- List the customers who have placed orders with a total value exceeding $500. 
-- Include the customer's full name, email, and the total order value.
select customers.first_name,
customers.last_name, customers.email,sum(revenue) as total_order_value
from customers,
(select orders.customer_id as c_id, customers.first_name,
customers.last_name, sum(order_items.quantity),
products.category, sum(products.price*order_items.quantity) as revenue
from orders,customers,order_items, products
where order_items.order_id = orders.order_id
and orders.customer_id = customers.customer_id
and products.product_id = order_items.product_id
group by orders.customer_id, customers.first_name,
customers.last_name, products.category) as subquery
where customers.customer_id = c_id
group by customers.customer_id;

-- Find the average stock quantity for each category of products. 
-- Display the category name and average stock quantity.

select products.category, avg(products.stock_quantity)
from products
group by products.category;

-- Retrieve the products with the lowest stock quantity (top 5) and their respective categories.
--  Order them by stock quantity in ascending order.

select products.product_name, products.category,
products.stock_quantity
from products
order by products.stock_quantity asc
limit 5;

-- List the customers who have placed orders in January 2023. 
-- Display the customer names and the number of orders they placed.

select customers.first_name, customers.last_name,
order_items.quantity
from customers, order_items, orders
where orders.order_id = order_items.order_id
and orders.customer_id = customers.customer_id
and month(orders.order_date) = 1;